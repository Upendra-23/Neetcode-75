class Solution {
    bool isvalid(int row,int col,vector<string> &board){
        int i = row, j = col;
        while(j >= 0){
            if(board[i][j] == 'Q') return false;
            j--;
        }

        i = row, j = col;
        while(i >= 0 && j >= 0){
            if(board[i][j] == 'Q') return false;
            i--;
            j--;
        }

        i = row, j = col;
        while(i < board.size() && j >= 0){
            if(board[i][j] == 'Q') return false;
            i++;
            j--;
        }
        return true;
    }
    void fun(int col,int n,vector<string> &board,vector<vector<string>> &ans){
        if(col == n){
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(isvalid(row,col,board)){
                board[row][col] = 'Q';
                fun(col+1,n,board,ans);
                board[row][col] = '.';
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n, '.');
        for(int i=0;i<n;i++)
            board[i] = s;
        fun(0,n,board,ans);
        return ans;
    }
};

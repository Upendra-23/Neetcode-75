class Solution {
    int fun(int ind,int target,vector<int> &nums,vector<vector<int>> &dp){
        if(ind == 0){
            if(target == 0 && nums[ind] == 0) return 2;
            if(target == 0 || nums[ind] == target) return 1;
            return 0;
        }
        if(dp[ind][target] != -1) return dp[ind][target];
        int notpick = fun(ind-1,target,nums,dp);
        int pick = 0;
        if(nums[ind] <= target)
            pick += fun(ind-1,target-nums[ind],nums,dp);
        return dp[ind][target] = pick + notpick;
    }
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int total = accumulate(nums.begin(),nums.end(),0);
        if((total+target) < 0 || (total+target)%2 != 0) return 0;
        int k = (total+target)/2;
        int n = nums.size();
        vector<vector<int>> dp(n,vector<int> (k+1,-1));
        return fun(n-1,k,nums,dp);
    }
};

class Solution {
    bool isvalid(int row,int col,int n,int m){
        return row >= 0 && row < n && col >= 0 && col < m;
    }
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};

        vector<vector<int>> vis(n,vector<int> (m,0));
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,
        greater<pair<int,pair<int,int>>>> pq;
        pq.push({grid[0][0],{0,0}});
        vis[0][0] = true;
        while(!pq.empty()){
            auto it = pq.top();
            pq.pop();
            int dis = it.first;
            int row = it.second.first;
            int col = it.second.second;

            if(row == n-1 && col == n-1) return dis;

            for(int i=0;i<4;i++){
                int nrow = row + dr[i];
                int ncol = col + dc[i];
                if(isvalid(nrow,ncol,n,m) && !vis[nrow][ncol]){
                    vis[nrow][ncol] = true;
                    pq.push({max(dis,grid[nrow][ncol]),{nrow,ncol}});
                }
            }
        }
        return -1;
    }
};

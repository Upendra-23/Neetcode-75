class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<int> dist(n,1e9);
        vector<pair<int,int>> adj[n];
        for(auto it:flights)
            adj[it[0]].push_back({it[1],it[2]});
        
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{0,src}});
        dist[src] = 0;

        while(!q.empty()){
            int steps = q.front().first;
            int node = q.front().second.second;
            int dis = q.front().second.first;
            q.pop();

            if(steps > k) continue;
            for(auto it:adj[node]){
                int adjnode = it.first;
                int edgewt = it.second;
                if(dis + edgewt < dist[adjnode]){
                    dist[adjnode] = dis + edgewt;
                    q.push({steps+1,{dist[adjnode],adjnode}});
                }
            }
        }

        return dist[dst] == 1e9 ? -1 : dist[dst];

    }
};

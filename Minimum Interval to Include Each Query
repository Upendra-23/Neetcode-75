class Solution {
public:
    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {
        vector<int> q = queries;
        unordered_map<int,int> mp;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        sort(intervals.begin(),intervals.end());
        sort(q.begin(),q.end());
        int i = 0,  n = intervals.size();
        
        for(auto query:q){
            while(i < n && intervals[i][0] <= query){
                int left = intervals[i][0];
                int right = intervals[i][1];
                pq.push({right-left+1,right});
                i++;
            }

            while(!pq.empty() && pq.top().second < query)
                pq.pop();

            if(!pq.empty()) mp[query] = pq.top().first;
            else mp[query] = -1;
        }

        vector<int> ans;
        for(auto it:queries){
            ans.push_back(mp[it]);
        }
        return ans;
    }
};

class DisjointSet {
public:
    vector<int> parent,size;
    DisjointSet(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUpar(int node){
        if(parent[node] == node)
            return node;
        return parent[node] = findUpar(parent[node]);
    }

    void unionBySize(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] > size[ulp_v]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
        else{
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
    }
};
class Solution {
    bool isvalid(int row,int col,int n,int m){
        return row >= 0 && row < n && col >= 0 && col < m;
    }
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        DisjointSet ds(n*m);

        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};

        int ans = 0;
        for(int row=0;row<n;row++){
            for(int col=0;col<m;col++){
                if(grid[row][col] == 1){
                    for(int i=0;i<4;i++){
                        int nrow = row + dr[i];
                        int ncol = col + dc[i];
                        if(isvalid(nrow,ncol,n,m) && grid[nrow][ncol] == 1){
                            int node = row * m + col;
                            int adjnode = nrow * m + ncol;
                            ds.unionBySize(node,adjnode);
                        }
                    }
                }
            }
        }

        for(int row=0;row<n;row++){
            for(int col=0;col<m;col++){
                if(grid[row][col] == 1){
                    int node = row * m + col;
                    ans = max(ans,ds.size[ds.findUpar(node)]);
                }
            }
        }
        return ans;
    }
};

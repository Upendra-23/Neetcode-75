class Node {
public:
    int key;
    int val;
    Node* prev = NULL;
    Node* next = NULL;
    Node(int _key,int _val){
        key = _key;
        val = _val;
    }
};
class LRUCache {
    unordered_map<int,Node*> mp;
    Node* head = new Node(-1,-1);
    Node* tail = new Node(-1,-1);
    int cap;
public:
    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->prev = head;
    }

    void addNode(Node* node){
        Node* temp = head->next;
        node->next = temp;
        temp->prev = node;
        head->next = node;
        node->prev = head;
    }

    void deleteNode(Node* node){
        Node* Next = node->next;
        Node* Prev = node->prev;
        Prev->next = Next;
        Next->prev = Prev;
    }
    
    int get(int key) {
        if(mp.find(key) != mp.end()){
            Node* node = mp[key];
            int ans = node->val;
            deleteNode(node);
            addNode(node);
            return ans;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            Node* node = mp[key];
            deleteNode(node);
            mp.erase(key);

        }
        if(mp.size() == cap){
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        Node* newNode = new Node(key,value);
        addNode(newNode);
        mp[key] = newNode;
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */

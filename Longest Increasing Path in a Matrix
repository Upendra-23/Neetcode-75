class Solution {
    bool isvalid(int row,int col,int n,int m){
        return row >= 0 && row < n && col >= 0 && col < m;
    }
    int fun(int row,int col,vector<vector<int>> &matrix,vector<vector<int>> &dp){
        if(dp[row][col] > 0) return dp[row][col];
        int maxi = 1;
        int dr[] = {-1,0,0,1};
        int dc[] = {0,-1,1,0};
        for(int i=0;i<4;i++){
            int nrow = row + dr[i];
            int ncol = col + dc[i];
            if(isvalid(nrow,ncol,matrix.size(),matrix[0].size()) && matrix[nrow][ncol] > matrix[row][col])
                maxi = max(maxi,1+fun(nrow,ncol,matrix,dp));
        }
        return dp[row][col] = maxi;
    }
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<vector<int>> dp(n,vector<int> (m,0));

        int ans = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                ans = max(ans,fun(i,j,matrix,dp));
            }
        }
        return ans;
    }
};

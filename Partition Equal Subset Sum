class Solution {
    int fun(int ind,int target,vector<int> &nums,vector<vector<int>> &dp){
        if(target == 0) return true;
        if(ind == nums.size()) return false;
        if(dp[ind][target] != -1) return dp[ind][target];
        int notpick = fun(ind+1,target,nums,dp);
        int pick = false;
        if(nums[ind] <= target)
            pick = fun(ind+1,target-nums[ind],nums,dp);
        return dp[ind][target] = pick || notpick;
    }
public:
    bool canPartition(vector<int>& nums) {
        int total = accumulate(nums.begin(),nums.end(),0);
        if(total & 1) return false;
        int k = total/2;
        vector<vector<int>> dp(nums.size(),vector<int> (k+1,-1));
        return fun(0,k,nums,dp);
    }
};
